# Stage 1: Base PHP image with system dependencies
FROM php:8.2-fpm-alpine AS base

# Version labels for tracking
LABEL maintainer="Notification Service Team"
LABEL version="1.0"
LABEL description="Test environment for Notification Service"

# System dependencies
RUN apk add --no-cache \
    git \
    zip \
    unzip \
    libpq \
    linux-headers \
    $PHPIZE_DEPS \
    && rm -rf /var/cache/apk/*

# PHP extensions installation with version pinning
RUN docker-php-ext-install -j$(nproc) pdo_pgsql \
    && pecl install redis-5.3.7 \
    && pecl install xdebug-3.2.1 \
    && docker-php-ext-enable redis xdebug

# Install Composer with signature verification
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Install k6 for performance testing
RUN wget https://github.com/grafana/k6/releases/download/v0.45.0/k6-v0.45.0-linux-amd64.tar.gz \
    && tar -xzf k6-v0.45.0-linux-amd64.tar.gz \
    && mv k6-v0.45.0-linux-amd64/k6 /usr/local/bin/ \
    && rm -rf k6-v0.45.0-linux-amd64*

# PHP configuration for testing environment
RUN echo "memory_limit = 512M" > $PHP_INI_DIR/conf.d/memory-limit.ini \
    && echo "error_reporting = E_ALL" > $PHP_INI_DIR/conf.d/error-reporting.ini \
    && echo "display_errors = On" > $PHP_INI_DIR/conf.d/display-errors.ini

# Xdebug configuration
RUN echo "xdebug.mode = coverage,debug" > $PHP_INI_DIR/conf.d/xdebug.ini \
    && echo "xdebug.client_host = host.docker.internal" >> $PHP_INI_DIR/conf.d/xdebug.ini \
    && echo "xdebug.start_with_request = yes" >> $PHP_INI_DIR/conf.d/xdebug.ini \
    && echo "xdebug.log_level = 0" >> $PHP_INI_DIR/conf.d/xdebug.ini

# Opcache optimization for testing
RUN echo "opcache.enable=1" > $PHP_INI_DIR/conf.d/opcache.ini \
    && echo "opcache.memory_consumption=256" >> $PHP_INI_DIR/conf.d/opcache.ini \
    && echo "opcache.max_accelerated_files=20000" >> $PHP_INI_DIR/conf.d/opcache.ini \
    && echo "opcache.validate_timestamps=1" >> $PHP_INI_DIR/conf.d/opcache.ini

# Stage 2: Dependencies installation
FROM base AS dependencies

WORKDIR /var/www/test

# Copy composer files
COPY composer.json composer.lock ./

# Install dependencies
RUN composer install \
    --no-interaction \
    --no-plugins \
    --no-scripts \
    --prefer-dist \
    --optimize-autoloader \
    && composer clear-cache

# Stage 3: Final test environment
FROM base AS test

# Environment variables
ENV APP_ENV=testing
ENV XDEBUG_MODE=coverage,debug
ENV PHP_IDE_CONFIG=serverName=docker
ENV COMPOSER_ALLOW_SUPERUSER=1
ENV PHP_MEMORY_LIMIT=512M
ENV PHP_ERROR_REPORTING=E_ALL

# Test-specific environment variables
ENV TEST_DB_HOST=test-db
ENV TEST_DB_PORT=5432
ENV TEST_REDIS_HOST=test-redis
ENV TEST_REDIS_PORT=6379
ENV TEST_AWS_ENDPOINT=http://test-localstack:4566

# Set working directory
WORKDIR /var/www/test

# Copy dependencies from previous stage
COPY --from=dependencies /var/www/test/vendor ./vendor

# Copy application code
COPY . .

# Set proper permissions
RUN chown -R www-data:www-data /var/www/test \
    && chmod -R 755 /var/www/test

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=10s --retries=3 \
    CMD php -v || exit 1

# Entrypoint script
COPY Scripts/run_tests.sh /usr/local/bin/run_tests.sh
RUN chmod +x /usr/local/bin/run_tests.sh

ENTRYPOINT ["/usr/local/bin/run_tests.sh"]