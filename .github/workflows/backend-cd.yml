name: Backend CD

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: 'Environment to deploy to'
        options:
          - staging
          - production

# Ensure only one deployment runs at a time per environment
concurrency:
  group: backend-${{ github.ref }}-${{ matrix.environment }}
  cancel-in-progress: false

env:
  WORKING_DIRECTORY: src/backend
  PHP_VERSION: '8.2'
  TERRAFORM_VERSION: '1.5.0'

jobs:
  deploy:
    name: Deploy to ${{ matrix.environment }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        environment: [staging, production]
    environment:
      name: ${{ matrix.environment }}
      # Production requires explicit approval
      url: https://api.${{ matrix.environment }}.notification-service.com

    # Production deployment requires successful staging deployment
    if: |
      matrix.environment == 'staging' ||
      (matrix.environment == 'production' && needs.deploy.result == 'success' && github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/github-actions-deploy
          aws-region: ${{ matrix.environment == 'production' && 'us-east-1' || 'us-east-1' }}
          role-duration-seconds: 3600

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: json, pdo, pdo_pgsql, redis
          coverage: none
          tools: composer:v2

      - name: Install dependencies
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          composer install --no-dev --no-progress --prefer-dist --optimize-autoloader
          composer dump-autoload --optimize

      - name: Initialize Terraform
        working-directory: infrastructure/terraform/environments/${{ matrix.environment }}
        run: |
          terraform init -backend-config=backend_${{ matrix.environment }}.tfvars
          terraform workspace select ${{ matrix.environment }} || terraform workspace new ${{ matrix.environment }}

      - name: Terraform Plan
        working-directory: infrastructure/terraform/environments/${{ matrix.environment }}
        run: |
          terraform plan \
            -var="environment=${{ matrix.environment }}" \
            -var="aws_region=${{ matrix.environment == 'production' && 'us-east-1' || 'us-east-1' }}" \
            -out=tfplan
        env:
          TF_VAR_notification_service_version: ${{ github.sha }}

      - name: Terraform Apply
        working-directory: infrastructure/terraform/environments/${{ matrix.environment }}
        run: terraform apply -auto-approve tfplan

      - name: Deploy Lambda Functions
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Package Lambda functions
          zip -r notification-processor.zip . -x "tests/*" "*.git*"
          
          # Update Lambda functions
          for function in notification-processor template-handler vendor-handler; do
            aws lambda update-function-code \
              --function-name "${{ matrix.environment }}-${function}" \
              --zip-file fileb://notification-processor.zip \
              --publish
            
            # Wait for function update to complete
            aws lambda wait function-updated \
              --function-name "${{ matrix.environment }}-${function}"
          done
        env:
          AWS_DEFAULT_REGION: ${{ matrix.environment == 'production' && 'us-east-1' || 'us-east-1' }}

      - name: Verify Deployment
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: |
          # Health check endpoint verification
          for i in {1..5}; do
            response=$(curl -s -o /dev/null -w "%{http_code}" https://api.${{ matrix.environment }}.notification-service.com/health)
            if [ "$response" == "200" ]; then
              echo "Health check passed"
              exit 0
            fi
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1

      - name: Notify Deployment Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}'
            const environment = '${{ matrix.environment }}'
            const message = `Deployment to ${environment} ${status.toLowerCase()}`
            
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.name,
              issue_number: context.issue.number,
              body: message
            })